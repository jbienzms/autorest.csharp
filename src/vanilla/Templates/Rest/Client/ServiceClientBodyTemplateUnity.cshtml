@using System
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.CodeModelCs>


/// <summary>
/// The base URI of the service.
/// </summary>
@if(Model.IsCustomBaseUri)
{
@:internal string BaseUri {get; set;}
}
else
{
@:public System.Uri BaseUri { get; set; }
}
@EmptyLine

/// <summary>
/// Gets or sets json serialization settings.
/// </summary>
public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
@EmptyLine

/// <summary>
/// Gets or sets json deserialization settings.
/// </summary>
public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
@EmptyLine
        
@foreach (var property in Model.Properties)
{
@:/// <summary>
@:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
@:/// </summary>
@:public @property.ModelTypeName @property.Name { get; @(property.IsReadOnly || property.IsConstant ? "private " : "")set; }
@EmptyLine
}
        
@foreach (var operation in Model.AllOperations) 
{
@:/// <summary>
@:/// Gets the I@(operation.TypeName).
@:/// </summary>
@:public virtual I@(operation.TypeName) @(operation.NameForProperty) { get; private set; }
@EmptyLine
}
       
/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)()
{
    this.Initialize();
}
@EmptyLine

@if(!Model.IsCustomBaseUri)
{ 
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri) : this()
@:{
@:    if (baseUri == null)
@:    {
@:        throw new System.ArgumentNullException("baseUri");
@:    }
@:
@:    this.BaseUri = baseUri;
@:}
@:@EmptyLine
}

@{var parameters = Model.Properties.Where(p => p.IsRequired && p.IsReadOnly);}
@if (parameters.Any())
{
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters)) : this()
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters)) : this()
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

if(!Model.IsCustomBaseUri)
{ 
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters)) : this()
@:{
@:    if (baseUri == null)
@:    {
@:        throw new System.ArgumentNullException("baseUri");
@:    }
    foreach (var param in parameters)
    {
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}

@:    this.BaseUri = baseUri;

foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine
        
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters)) : this()
@:{
@:    if (baseUri == null)
@:    {
@:        throw new System.ArgumentNullException("baseUri");
@:    }

foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}

@:    this.BaseUri = baseUri;

foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine
}
}